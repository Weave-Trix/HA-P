{
  "address": "0xdc1Ca033c90dF601Ebd4ce7CdC62F7A66120E70B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eventEmitterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_auctionKeeperAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "addBiddingAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "addPendingPaymentAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "addVerifyWinnerAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "biddingAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBiddingAuctions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractType",
      "outputs": [
        {
          "internalType": "enum Constants.ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingPaymentAuctions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVerifyWinnerAuctions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingPaymentAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "removeBiddingAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "removePendingPaymentAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "removeVerifyWinnerAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "searchBiddingAuction",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "searchPendingPaymentAuction",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auctionAddress",
          "type": "address"
        }
      ],
      "name": "searchVerifyWinnerAuction",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verifyWinnerAuctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3135803b220d279447bfbc4e9dd0a283fc6f45d61adf68c031185adb4f88a1d2",
  "receipt": {
    "to": null,
    "from": "0xA8C457930129a4825227c12706Ad99b7E4528Ac0",
    "contractAddress": "0xdc1Ca033c90dF601Ebd4ce7CdC62F7A66120E70B",
    "transactionIndex": 45,
    "gasUsed": "934072",
    "logsBloom": "0x
    "blockHash": "0x430c832a12e17b40ba59647bfdfa45190021e7113a4aa3dc50ed8642f5fcfe9b",
    "transactionHash": "0x3135803b220d279447bfbc4e9dd0a283fc6f45d61adf68c031185adb4f88a1d2",
    "logs": [],
    "blockNumber": 7680286,
    "cumulativeGasUsed": "7680353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3CD4D8e20Fcf0A5923C13A2E3C3b585679b59dC5",
    "0xD998fACeeD18821dB38aED49905a756c82CD1adD",
    "0x8Cb7C4d5F1E91508EFe5AE447dc798BF85Ff4757",
    "0xE063856F2406C1572F6978acEf5e0aF1AFB0c18E"
  ],
  "numDeployments": 2,
  "solcInputHash": "3c2cf0b0cade31d1af9f3f98d3d2f77c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eventEmitterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auctionKeeperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"addBiddingAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"addPendingPaymentAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"addVerifyWinnerAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biddingAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBiddingAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractType\",\"outputs\":[{\"internalType\":\"enum Constants.ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingPaymentAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerifyWinnerAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingPaymentAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"removeBiddingAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"removePendingPaymentAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"removeVerifyWinnerAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"searchBiddingAuction\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"searchPendingPaymentAuction\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"name\":\"searchVerifyWinnerAuction\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifyWinnerAuctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionContracts.sol\":\"AuctionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"contracts/AuctionContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"../libraries/AuctionUtility.sol\\\";\\n\\nerror AuctionRegistry_RestrictedOwnerAccess();\\nerror AuctionRegistry_RestrictedContractFactoryAccess();\\nerror AuctionRegistry__RestrictedManagerAccess();\\nerror AuctionRegistry__AuctionOngoing();\\n\\nerror Auction_RestrictedSellerAccess();\\nerror Auction_NotInPendingPaymentState();\\nerror Auction_RestrictedWinnerPaymentAccess();\\nerror Auction_SelfBiddingIsNotAllowed();\\nerror Auction_NoProceeds();\\nerror Auction_UnauthorizedAccess();\\n\\nerror ContractFactory__RestrictedManagerAccess();\\nerror ContractFactory_RestrictedOwnerAccess();\\n\\n/*\\n1. Seller can register a new vehicle by minting a vehicle NFT\\n2. Seller can host an auction for vehicles NFT that they own by creating a new BiddingHost contract\\n3. BiddingHost can call HAP to emit events \\n    to record each bid, extend bid end time, end bid, and record pending payments\\n4. Chainlink Keeper is needed for automated end bid + refund deposit, lock contract + send deposit to HAP owner\\n5. Chainlink Oracle is needed to fetch the latest usd -> eth rate\\n*/\\ncontract ContractFactory {\\n    address public immutable owner;\\n    address public auctionManagerAddress;\\n    address public auctionRegistryAddress;\\n    AuctionManager private auctionManager;\\n    AuctionRegistry private auctionRegistry;\\n\\n    constructor(address _auctionRegistryAddress) {\\n        owner = msg.sender;\\n        auctionRegistryAddress = _auctionRegistryAddress;\\n        auctionRegistry = AuctionRegistry(_auctionRegistryAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert ContractFactory_RestrictedOwnerAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAuctionManager() {\\n        if (msg.sender != auctionManagerAddress) {\\n            revert ContractFactory__RestrictedManagerAccess();\\n        }\\n        _;\\n    }\\n\\n    function getContractType() public pure returns (Constants.ContractType) {\\n        return Constants.ContractType.CONTRACT_FACTORY;\\n    }\\n\\n    function setAuctionManagerAddress(address _auctionManagerAddress)\\n        public\\n        onlyOwner\\n    {\\n        auctionManagerAddress = _auctionManagerAddress;\\n        auctionManager = AuctionManager(auctionManagerAddress);\\n    }\\n\\n    function createAuction(\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _eventEmitterAddress,\\n        address _auctionKeeperAddress\\n    ) public onlyAuctionManager {\\n        // call AuctionRegistry, register auction\\n        // create Auction contract\\n        Auction newAuctionInstance = new Auction(\\n            owner,\\n            _seller,\\n            auctionManagerAddress,\\n            _eventEmitterAddress,\\n            _auctionKeeperAddress,\\n            _nftAddress,\\n            _tokenId\\n        );\\n\\n        auctionRegistry.registerAuction(\\n            _nftAddress,\\n            _tokenId,\\n            address(newAuctionInstance)\\n        );\\n    }\\n}\\n\\ncontract EventEmitter {\\n    modifier onlyAuction(address _senderAddress) {\\n        require(\\n            (AuctionUtility.getContractType(_senderAddress) ==\\n                Constants.ContractType.AUCTION),\\n            \\\"eventEmit can only be called by Auction\\\"\\n        );\\n        _;\\n    }\\n\\n    event AuctionRegistered(\\n        address indexed auction,\\n        address seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 registerTime\\n    );\\n\\n    event AuctionStartedBidding(\\n        address indexed auction,\\n        address seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 depositWei,\\n        uint256 bidStartTime,\\n        uint256 bidEndTime,\\n        uint256 startingBid\\n    );\\n\\n    event AuctionVerifyingWinner(\\n        address indexed auction,\\n        address seller,\\n        address nftAddress,\\n        uint256 indexed tokenId,\\n        address indexed winner,\\n        uint256 winningBid,\\n        uint256 platformCharge,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    event AuctionPendingPayment(\\n        address indexed auction,\\n        address seller,\\n        address nftAddress,\\n        uint256 indexed tokenId,\\n        address indexed winner,\\n        uint256 winningBid,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    event AuctionAuditResult(\\n        address indexed auction,\\n        address seller,\\n        address nftAddress,\\n        uint256 indexed tokenId,\\n        address indexed winner,\\n        uint256 winningBid,\\n        uint256 time,\\n        bool pass\\n    );\\n\\n    // if winner did not pay, in the event listener, change the deposit placed event record (boolean winnerWithdrawal to false)\\n    event AuctionClosed(\\n        address indexed auction,\\n        address seller,\\n        address nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 closeTime,\\n        address winner,\\n        uint256 winningBid,\\n        Constants.AuctionEndState indexed endState\\n    );\\n\\n    event AuctionDepositPlaced(\\n        address indexed auction,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address bidder,\\n        uint256 depositAmount,\\n        uint256 depositTime\\n    );\\n\\n    event AuctionDepositRetrieved(\\n        address indexed auction,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address bidder,\\n        uint256 retrieveAmount,\\n        uint256 retrievalTime\\n    );\\n\\n    event AuctionBidPlaced(\\n        address indexed auction,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 bidTime\\n    );\\n\\n    event AuctionFullSettlementPaid(\\n        address indexed auction,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address indexed winner,\\n        address seller,\\n        uint256 indexed paidAmount,\\n        uint256 paidTime\\n    );\\n\\n    event SellerEarningsRetrieved(\\n        address indexed auction,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address indexed seller,\\n        uint256 indexed retrieveAmount,\\n        uint256 retrievalTime\\n    );\\n\\n    event winnerPaymentRefunded(\\n        address indexed auction,\\n        address nftAddress,\\n        uint256 tokenId,\\n        address winner,\\n        uint256 indexed refundAmount,\\n        uint256 retrievalTime\\n    );\\n\\n    event PlatformEarnings(\\n        address indexed platformOwner,\\n        address payer,\\n        address indexed auction,\\n        Constants.PlatformEarnings earningType,\\n        uint256 time\\n    );\\n\\n    function emitAuctionRegistered(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _registerTime\\n    ) public {\\n        emit AuctionRegistered(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _registerTime\\n        );\\n    }\\n\\n    function emitAuctionStartedBidding(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _depositWei,\\n        uint256 _startTime,\\n        uint256 _bidEndTime,\\n        uint256 _startingBid\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionStartedBidding(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _depositWei,\\n            _startTime,\\n            _bidEndTime,\\n            _startingBid\\n        );\\n    }\\n\\n    function emitAuctionVerifyingWinner(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _winner,\\n        uint256 _winningBid,\\n        uint256 _platformCharge,\\n        uint256 _startTime,\\n        uint256 _expiryTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionVerifyingWinner(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _winner,\\n            _winningBid,\\n            _platformCharge,\\n            _startTime,\\n            _expiryTime\\n        );\\n    }\\n\\n    function emitAuctionPendingPayment(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _winner,\\n        uint256 _winningBid,\\n        uint256 _startTime,\\n        uint256 _expiryTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionPendingPayment(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _winner,\\n            _winningBid,\\n            _startTime,\\n            _expiryTime\\n        );\\n    }\\n\\n    function emitAuctionAuditResult(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _winner,\\n        uint256 _winningBid,\\n        uint256 _time,\\n        bool _pass\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionAuditResult(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _winner,\\n            _winningBid,\\n            _time,\\n            _pass\\n        );\\n    }\\n\\n    function emitAuctionClosed(\\n        address _auction,\\n        address _seller,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _closeTime,\\n        address _winner,\\n        uint256 _winningBid,\\n        Constants.AuctionEndState _endState\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionClosed(\\n            _auction,\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            _closeTime,\\n            _winner,\\n            _winningBid,\\n            _endState\\n        );\\n    }\\n\\n    function emitAuctionDepositPlaced(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _bidder,\\n        uint256 _depositAmount,\\n        uint256 _depositTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionDepositPlaced(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _bidder,\\n            _depositAmount,\\n            _depositTime\\n        );\\n    }\\n\\n    function emitAuctionBidPlaced(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _bidder,\\n        uint256 _bidAmount,\\n        uint256 _bidTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionBidPlaced(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _bidder,\\n            _bidAmount,\\n            _bidTime\\n        );\\n    }\\n\\n    function emitAuctionFullSettlementPaid(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _winner,\\n        address _seller,\\n        uint256 _paidAmount,\\n        uint256 _paidTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionFullSettlementPaid(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _winner,\\n            _seller,\\n            _paidAmount,\\n            _paidTime\\n        );\\n    }\\n\\n    function emitAuctionDepositRetrieved(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _bidder,\\n        uint256 _retrieveAmount,\\n        uint256 _retrievalTime\\n    ) public onlyAuction(msg.sender) {\\n        emit AuctionDepositRetrieved(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _bidder,\\n            _retrieveAmount,\\n            _retrievalTime\\n        );\\n    }\\n\\n    function emitSellerEarningsRetrieved(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _seller,\\n        uint256 _retrieveAmount,\\n        uint256 _retrievalTime\\n    ) public onlyAuction(msg.sender) {\\n        emit SellerEarningsRetrieved(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _seller,\\n            _retrieveAmount,\\n            _retrievalTime\\n        );\\n    }\\n\\n    function emitWinnerPaymentRefunded(\\n        address _auction,\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _winner,\\n        uint256 _refundAmount,\\n        uint256 _retrievalTime\\n    ) public onlyAuction(msg.sender) {\\n        emit winnerPaymentRefunded(\\n            _auction,\\n            _nftAddress,\\n            _tokenId,\\n            _winner,\\n            _refundAmount,\\n            _retrievalTime\\n        );\\n    }\\n\\n    function emitPlatformEarnings(\\n        address _platformOwner,\\n        address _payer,\\n        address _auction,\\n        Constants.PlatformEarnings _earningType,\\n        uint256 _time\\n    ) public onlyAuction(msg.sender) {\\n        emit PlatformEarnings(\\n            _platformOwner,\\n            _payer,\\n            _auction,\\n            _earningType,\\n            _time\\n        );\\n    }\\n}\\n\\ncontract AuctionRegistry {\\n    address public immutable owner;\\n    address public auctionManagerAddress;\\n    AuctionManager private auctionManager;\\n\\n    mapping(address => mapping(uint256 => address)) public auctionListings;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert AuctionRegistry_RestrictedOwnerAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAuctionManager() {\\n        if (msg.sender != auctionManagerAddress) {\\n            revert AuctionRegistry__RestrictedManagerAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyContractFactory() {\\n        if (\\n            AuctionUtility.getContractType(msg.sender) !=\\n            Constants.ContractType.CONTRACT_FACTORY\\n        ) {\\n            revert AuctionRegistry_RestrictedContractFactoryAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAuctionInactive(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _auctionAddress\\n    ) {\\n        // if event still not ended, unable to create a same auction for the NFT\\n        // create interface of Auction.sol\\n        Auction auction = Auction(_auctionAddress);\\n        // call Auction.getEventState();\\n        require(\\n            auctionListings[_nftAddress][_tokenId] == address(0x0) ||\\n                (!auction.inClosedState() && !auction.inRegisteredState()),\\n            \\\"Duplicate auction for the vehicle is active!\\\"\\n        );\\n        _;\\n    }\\n\\n    function getContractType() public pure returns (Constants.ContractType) {\\n        return Constants.ContractType.AUCTION_REGISTRY;\\n    }\\n\\n    function setAuctionManagerAddress(address _auctionManagerAddress)\\n        public\\n        onlyOwner\\n    {\\n        auctionManagerAddress = _auctionManagerAddress;\\n        auctionManager = AuctionManager(auctionManagerAddress);\\n    }\\n\\n    function registerAuction(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _auctionAddress\\n    )\\n        public\\n        onlyContractFactory\\n        onlyAuctionInactive(_nftAddress, _tokenId, _auctionAddress)\\n    {\\n        // if NFT id not in map, store the NFT -> address mapping\\n        // else if NFT id already exist, update the mapping\\n        auctionListings[_nftAddress][_tokenId] = _auctionAddress; // this line does it all\\n    }\\n\\n    // TODO: registerTechnician\\n}\\n\\ncontract AuctionKeeper is KeeperCompatibleInterface {\\n    address public immutable owner;\\n    address public auctionManagerAddress;\\n    AuctionManager private auctionManager;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert AuctionRegistry_RestrictedOwnerAccess();\\n        }\\n        _;\\n    }\\n\\n    function getContractType() public pure returns (Constants.ContractType) {\\n        return Constants.ContractType.AUCTION_KEEPER;\\n    }\\n\\n    function setAuctionManagerAddress(address _auctionManagerAddress)\\n        public\\n        onlyOwner\\n    {\\n        auctionManagerAddress = _auctionManagerAddress;\\n        auctionManager = AuctionManager(auctionManagerAddress);\\n    }\\n\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        if (keccak256(checkData) == keccak256(hex\\\"01\\\")) {\\n            address[] memory biddingAuctions = auctionManager\\n                .getBiddingAuctions();\\n            upkeepNeeded = false;\\n            performData = checkData;\\n            for (uint i = 0; i < biddingAuctions.length; i++) {\\n                if (Auction(biddingAuctions[i]).getBidTimeLeft() == 0) {\\n                    upkeepNeeded = true;\\n                }\\n            }\\n            return (upkeepNeeded, performData);\\n        }\\n\\n        if (keccak256(checkData) == keccak256(hex\\\"02\\\")) {\\n            address[] memory verifyWinnerAuctions = auctionManager\\n                .getVerifyWinnerAuctions();\\n            upkeepNeeded = false;\\n            performData = checkData;\\n            for (uint i = 0; i < verifyWinnerAuctions.length; i++) {\\n                if (Auction(verifyWinnerAuctions[i]).getVerifyTimeLeft() == 0) {\\n                    upkeepNeeded = true;\\n                }\\n            }\\n            return (upkeepNeeded, performData);\\n        }\\n\\n        if (keccak256(checkData) == keccak256(hex\\\"03\\\")) {\\n            address[] memory pendingPaymentAuctions = auctionManager\\n                .getPendingPaymentAuctions();\\n            upkeepNeeded = false;\\n            performData = checkData;\\n            for (uint i = 0; i < pendingPaymentAuctions.length; i++) {\\n                if (\\n                    Auction(pendingPaymentAuctions[i]).getPaymentTimeLeft() == 0\\n                ) {\\n                    upkeepNeeded = true;\\n                }\\n            }\\n            return (upkeepNeeded, performData);\\n        }\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        address[] memory biddingAuctions = auctionManager.getBiddingAuctions();\\n        if (keccak256(performData) == keccak256(hex\\\"01\\\")) {\\n            for (uint i = 0; i < biddingAuctions.length; i++) {\\n                if (Auction(biddingAuctions[i]).getBidTimeLeft() == 0) {\\n                    Auction(biddingAuctions[i]).endBidding();\\n                }\\n            }\\n        }\\n\\n        if (keccak256(performData) == keccak256(hex\\\"02\\\")) {\\n            address[] memory verifyWinnerAuctions = auctionManager\\n                .getVerifyWinnerAuctions();\\n            for (uint i = 0; i < verifyWinnerAuctions.length; i++) {\\n                if (Auction(verifyWinnerAuctions[i]).getVerifyTimeLeft() == 0) {\\n                    Auction(verifyWinnerAuctions[i]).verifyWinner(false);\\n                }\\n            }\\n        }\\n\\n        if (keccak256(performData) == keccak256(hex\\\"03\\\")) {\\n            address[] memory pendingPaymentAuctions = auctionManager\\n                .getPendingPaymentAuctions();\\n            for (uint i = 0; i < pendingPaymentAuctions.length; i++) {\\n                if (\\n                    Auction(pendingPaymentAuctions[i]).getPaymentTimeLeft() == 0\\n                ) {\\n                    Auction(pendingPaymentAuctions[i]).closeAuction(\\n                        Constants.AuctionEndState.PAYMENT_OVERDUE\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\\ncontract AuctionManager {\\n    address[] public biddingAuctions;\\n    address[] public verifyWinnerAuctions;\\n    address[] public pendingPaymentAuctions;\\n    address auctionRegistryAddress;\\n    address eventEmitterAddress;\\n    address auctionKeeperAddress;\\n    address contractFactoryAddress;\\n\\n    constructor(\\n        address _auctionRegistryAddress,\\n        address _eventEmitterAddress,\\n        address _auctionKeeperAddress,\\n        address _contractFactoryAddress\\n    ) {\\n        auctionRegistryAddress = _auctionRegistryAddress;\\n        eventEmitterAddress = _eventEmitterAddress;\\n        auctionKeeperAddress = _auctionKeeperAddress;\\n        contractFactoryAddress = _contractFactoryAddress;\\n    }\\n\\n    function createAuction(address _nftAddress, uint256 _tokenId) external {\\n        ContractFactory contractFactory = ContractFactory(\\n            contractFactoryAddress\\n        );\\n        contractFactory.createAuction(\\n            msg.sender,\\n            _nftAddress,\\n            _tokenId,\\n            eventEmitterAddress,\\n            auctionKeeperAddress\\n        );\\n    }\\n\\n    function getBiddingAuctions() public view returns (address[] memory) {\\n        return biddingAuctions;\\n    }\\n\\n    function getVerifyWinnerAuctions() public view returns (address[] memory) {\\n        return verifyWinnerAuctions;\\n    }\\n\\n    function getPendingPaymentAuctions()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return pendingPaymentAuctions;\\n    }\\n\\n    function getContractType() public pure returns (Constants.ContractType) {\\n        return Constants.ContractType.AUCTION_MANAGER;\\n    }\\n\\n    function addBiddingAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        // to be called when bidding starts (by Auction.startAuction())\\n        biddingAuctions.push(address(_auctionAddress));\\n    }\\n\\n    function removeBiddingAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        // to be called when bidding end time reached (by keepers)\\n        uint auctionIndex;\\n        int searchResult = searchBiddingAuction(_auctionAddress);\\n        if (searchResult >= 0) {\\n            auctionIndex = uint(searchResult);\\n            for (uint i = auctionIndex; i < biddingAuctions.length - 1; i++) {\\n                biddingAuctions[i] = biddingAuctions[i + 1];\\n            }\\n            biddingAuctions.pop();\\n        }\\n    }\\n\\n    function addVerifyWinnerAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        //  to be called when bidding end time reached (by keepers)\\n        verifyWinnerAuctions.push(address(_auctionAddress));\\n    }\\n\\n    function removeVerifyWinnerAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        // to be called when winner paid (by Auction.payFullSettlement()) / payment expiry time reached (by keepers)\\n        uint auctionIndex;\\n        int searchResult = searchVerifyWinnerAuction(_auctionAddress);\\n        if (searchResult >= 0) {\\n            auctionIndex = uint(searchResult);\\n            for (\\n                uint i = auctionIndex;\\n                i < verifyWinnerAuctions.length - 1;\\n                i++\\n            ) {\\n                verifyWinnerAuctions[i] = verifyWinnerAuctions[i + 1];\\n            }\\n            verifyWinnerAuctions.pop();\\n        }\\n    }\\n\\n    function addPendingPaymentAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        // to be called when bidding end time reached (by keepers)\\n        pendingPaymentAuctions.push(address(_auctionAddress));\\n    }\\n\\n    function removePendingPaymentAuction(address _auctionAddress) public {\\n        require(\\n            AuctionUtility.getContractType(msg.sender) ==\\n                Constants.ContractType.AUCTION\\n        );\\n        // to be called when winner paid (by Auction.payFullSettlement()) / payment expiry time reached (by keepers)\\n        uint auctionIndex;\\n        int searchResult = searchPendingPaymentAuction(_auctionAddress);\\n        if (searchResult >= 0) {\\n            auctionIndex = uint(searchResult);\\n            for (\\n                uint i = auctionIndex;\\n                i < pendingPaymentAuctions.length - 1;\\n                i++\\n            ) {\\n                pendingPaymentAuctions[i] = pendingPaymentAuctions[i + 1];\\n            }\\n            pendingPaymentAuctions.pop();\\n        }\\n    }\\n\\n    function searchBiddingAuction(address _auctionAddress)\\n        public\\n        view\\n        returns (int)\\n    {\\n        for (uint i = 0; i < uint(biddingAuctions.length); i++) {\\n            if (biddingAuctions[i] == _auctionAddress) {\\n                return int(i);\\n            }\\n        }\\n        return -1;\\n    }\\n\\n    function searchVerifyWinnerAuction(address _auctionAddress)\\n        public\\n        view\\n        returns (int)\\n    {\\n        for (uint i = 0; i < uint(verifyWinnerAuctions.length); i++) {\\n            if (verifyWinnerAuctions[i] == _auctionAddress) {\\n                return int(i);\\n            }\\n        }\\n        return -1;\\n    }\\n\\n    function searchPendingPaymentAuction(address _auctionAddress)\\n        public\\n        view\\n        returns (int)\\n    {\\n        for (uint i = 0; i < uint(pendingPaymentAuctions.length); i++) {\\n            if (pendingPaymentAuctions[i] == _auctionAddress) {\\n                return int(i);\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n/*\\n1. Seller can start the auction directly or choose to send the vehicle for verification\\n2. Seller must set the duration for the auction and the starting price for the auction\\n3. Bidder can join the auction by paying a deposit of 500$, the deposit only has to be paid once\\n4. The deposit can be reclaimed by bidder after the auction ends,\\n    if the bidder lost the auction or \\n    the bidder won the auction and settled the full payment of the vehicle\\n5. Bidder can bid for the vehicle provided that the new bid is higher than the current highest bid\\n6. Seller cannot bid on their own auction\\n7. When the highese bid is updated within 60 seconds of the ending time, \\n    the duration of the auction will be reset to 3 minutes\\n8. The winner of the auction will be the bidder with the highest bid when the auction ends\\n9. The ownership of the auction will be transferred to the winner once the winner settled the payment\\n10. The payment must be exactly the amount of the winning bid\\n11. The payment must be made within 1 day(s) after the auction ends, \\n    otherwise payment cannot be made and the NFT will not be transferred\\n12. If no one bid on the vehicle after the bidding time is up, the auctin will end with EndState.NO_BIDDER\\n*/\\ncontract Auction {\\n    enum AuctionState {\\n        REGISTERED,\\n        BIDDING,\\n        VERIFYING_WINNER,\\n        PENDING_PAYMENT,\\n        PENDING_AUDIT,\\n        AUCTION_CLOSED\\n    }\\n\\n    address payable public immutable platformOwner;\\n    address payable public immutable seller;\\n    address public nftAddress;\\n    uint256 public tokenId;\\n    address private auctionKeeperAddress;\\n    address private auctionManagerAddress;\\n    AuctionManager private auctionManager;\\n    EventEmitter private eventEmitter;\\n    uint128 public depositUSD = 1;\\n    uint256 public depositWei;\\n    uint256 public bidStartTime;\\n    uint256 public bidEndTime;\\n    uint128 public durationSec;\\n    uint256 public verify_startTime;\\n    uint256 public verify_expiryTime;\\n    uint256 public verify_duration = 1 days;\\n    uint256 public payment_startTime;\\n    uint256 public payment_expiryTime;\\n    uint256 public payment_duration = 1 days;\\n    uint256 public platformCharge;\\n    AuctionState public currAuctionState = AuctionState.REGISTERED;\\n    Constants.AuctionEndState public auctionEndState =\\n        Constants.AuctionEndState.NOT_ENDED;\\n    uint256 public highestBid;\\n    address public highestBidder;\\n    bool winnerPaid = false;\\n    mapping(address => uint128) private bidderToDeposits;\\n    mapping(address => uint256) private addressToProceeds;\\n\\n    constructor(\\n        address _platformOwner,\\n        address _seller,\\n        address _auctionManagerAddress,\\n        address _eventEmitterAddress,\\n        address _auctionKeeperAddress,\\n        address _nftAddress,\\n        uint256 _tokenId\\n    ) {\\n        platformOwner = payable(_platformOwner);\\n        seller = payable(_seller);\\n        auctionManagerAddress = _auctionManagerAddress;\\n        auctionKeeperAddress = _auctionKeeperAddress;\\n        auctionManager = AuctionManager(_auctionManagerAddress);\\n        eventEmitter = EventEmitter(_eventEmitterAddress);\\n        nftAddress = _nftAddress;\\n        tokenId = _tokenId;\\n        currAuctionState = AuctionState.REGISTERED;\\n        depositWei = AuctionUtility.convertUsdToWei(depositUSD);\\n        eventEmitter.emitAuctionRegistered(\\n            address(this),\\n            _seller,\\n            _nftAddress,\\n            _tokenId,\\n            block.timestamp\\n        );\\n    }\\n\\n    modifier onlySeller() {\\n        if (msg.sender != seller) {\\n            revert Auction_RestrictedSellerAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlySellerOrKeeper() {\\n        if ((msg.sender != seller) && (msg.sender != auctionKeeperAddress)) {\\n            revert Auction_RestrictedSellerAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyWinnerPayment() {\\n        if (msg.sender != highestBidder && !(inPendingPaymentState())) {\\n            revert Auction_RestrictedWinnerPaymentAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier notForSeller() {\\n        if (msg.sender == seller) {\\n            revert Auction_SelfBiddingIsNotAllowed();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAuthority(address _user) {\\n        (bool success, bytes memory data) = nftAddress.call(\\n            abi.encodeWithSignature(\\\"getAuthorityAddress()\\\")\\n        );\\n        require(success, \\\"Unable to determine the contract type!\\\");\\n        address authority = abi.decode(data, (address));\\n        if (_user != authority) {\\n            revert Auction_UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyNftContract() {\\n        require(msg.sender == nftAddress);\\n        _;\\n    }\\n\\n    function getContractType() public pure returns (Constants.ContractType) {\\n        return Constants.ContractType.AUCTION;\\n    }\\n\\n    function inRegisteredState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.REGISTERED) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function inBiddingState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.BIDDING) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function inVerifyWinnerState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.VERIFYING_WINNER) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function inPendingPaymentState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.PENDING_PAYMENT) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function inPendingAuditState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.PENDING_AUDIT) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function inClosedState() public view returns (bool) {\\n        if (currAuctionState == AuctionState.AUCTION_CLOSED) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function startAuction(uint128 _durationSec, uint128 _startingBid) external {\\n        require(inRegisteredState(), \\\"Auction not in Registered state!\\\");\\n        require(msg.sender == seller, \\\"Requires owner!\\\");\\n        require(_startingBid > 0, \\\"Start bid < 0!\\\");\\n        bidStartTime = block.timestamp;\\n        bidEndTime = bidStartTime + _durationSec;\\n        durationSec = _durationSec;\\n        highestBid = _startingBid;\\n        currAuctionState = AuctionState.BIDDING;\\n\\n        eventEmitter.emitAuctionStartedBidding(\\n            address(this),\\n            seller,\\n            nftAddress,\\n            tokenId,\\n            depositWei,\\n            bidStartTime,\\n            bidEndTime,\\n            _startingBid\\n        );\\n        auctionManager.addBiddingAuction(address(this));\\n    }\\n\\n    function endBidding() public {\\n        require(inBiddingState(), \\\"Illegal state!\\\");\\n        require(block.timestamp >= bidEndTime, \\\"Bid time > 0!\\\");\\n        if (highestBidder == address(0x0)) {\\n            closeAuction(Constants.AuctionEndState.NO_BIDDER);\\n        } else {\\n            currAuctionState = AuctionState.VERIFYING_WINNER;\\n            verify_startTime = block.timestamp;\\n            verify_expiryTime = verify_startTime + verify_duration;\\n            platformCharge = AuctionUtility.getPlatformCharge(highestBid);\\n            eventEmitter.emitAuctionVerifyingWinner(\\n                address(this),\\n                seller,\\n                nftAddress,\\n                tokenId,\\n                highestBidder,\\n                highestBid,\\n                platformCharge,\\n                verify_startTime,\\n                verify_expiryTime\\n            );\\n            auctionManager.addVerifyWinnerAuction(address(this));\\n        }\\n        auctionManager.removeBiddingAuction(address(this));\\n    }\\n\\n    function verifyWinner(bool approveWinningBid) external onlySellerOrKeeper {\\n        // when timer's up, keepers call this function, verifyWinner(false)\\n        require(inVerifyWinnerState(), \\\"Illegal state!\\\");\\n        require(getVerifyTimeLeft() > 0, \\\"Verify expired!\\\");\\n        if (approveWinningBid) {\\n            payment_startTime = block.timestamp;\\n            payment_expiryTime = payment_startTime + payment_duration;\\n            currAuctionState = AuctionState.PENDING_PAYMENT;\\n            eventEmitter.emitAuctionPendingPayment(\\n                address(this),\\n                seller,\\n                nftAddress,\\n                tokenId,\\n                highestBidder,\\n                highestBid,\\n                payment_startTime,\\n                payment_expiryTime\\n            );\\n            auctionManager.removeVerifyWinnerAuction(address(this));\\n            auctionManager.addPendingPaymentAuction(address(this));\\n        } else {\\n            closeAuction(Constants.AuctionEndState.REJECTED_BY_SELLER);\\n            auctionManager.removeVerifyWinnerAuction(address(this));\\n        }\\n    }\\n\\n    function closeAuction(Constants.AuctionEndState _endState) public {\\n        // can only be closed when the winner pays or the payment pending expired (chainlink keepers trigger)\\n\\n        if (_endState == Constants.AuctionEndState.NO_BIDDER) {\\n            require(\\n                currAuctionState == AuctionState.BIDDING,\\n                \\\"Illegal state transition!\\\"\\n            );\\n            require(getBidTimeLeft() == 0, \\\"auction still bidding!\\\");\\n            require(\\n                highestBidder == address(0x0),\\n                \\\"closeAuction.NO_BIDDER must not have winner!\\\"\\n            );\\n        } else if (_endState == Constants.AuctionEndState.REJECTED_BY_SELLER) {\\n            require(\\n                currAuctionState == AuctionState.VERIFYING_WINNER,\\n                \\\"illegal state transition!\\\"\\n            );\\n            require(\\n                msg.sender == seller ||\\n                    AuctionUtility.getContractType(msg.sender) ==\\n                    Constants.ContractType.AUCTION_KEEPER,\\n                \\\"closeAuction requires seller or keeper!\\\"\\n            );\\n        } else if (_endState == Constants.AuctionEndState.PAYMENT_OVERDUE) {\\n            require(\\n                currAuctionState == AuctionState.PENDING_PAYMENT,\\n                \\\"illegal state transition!\\\"\\n            );\\n            require(\\n                msg.sender == seller ||\\n                    AuctionUtility.getContractType(msg.sender) ==\\n                    Constants.ContractType.AUCTION_KEEPER,\\n                \\\"closeAuction requires seller or keeper!\\\"\\n            );\\n            require(winnerPaid == false, \\\"winner already paid!\\\");\\n            // TODO: transfer winner's deposit to platform_owner\\n        } else if (\\n            (_endState == Constants.AuctionEndState.OWNERSHIP_TRANSFERRED) ||\\n            (_endState == Constants.AuctionEndState.AUDIT_REJECTED)\\n        ) {\\n            require(\\n                currAuctionState == AuctionState.PENDING_AUDIT,\\n                \\\"illegal state transition!\\\"\\n            );\\n            require(msg.sender == nftAddress, \\\"only Auditor\\\");\\n        } else {\\n            // else if (_endState == Constants.AuctionEndState.CANCELED)\\n            require(\\n                currAuctionState == AuctionState.REGISTERED,\\n                \\\"illegal state transition!\\\"\\n            );\\n            require(msg.sender == seller, \\\"only seller!\\\");\\n        }\\n\\n        currAuctionState = AuctionState.AUCTION_CLOSED;\\n        auctionEndState = _endState;\\n        eventEmitter.emitAuctionClosed(\\n            address(this),\\n            seller,\\n            nftAddress,\\n            tokenId,\\n            block.timestamp,\\n            highestBidder,\\n            highestBid,\\n            _endState\\n        );\\n        if ((_endState == Constants.AuctionEndState.PAYMENT_OVERDUE)) {\\n            auctionManager.removePendingPaymentAuction(address(this));\\n        }\\n    }\\n\\n    function placeDeposit() external payable notForSeller {\\n        require(inBiddingState(), \\\"Illegal state!\\\");\\n        require((bidderToDeposits[msg.sender] == 0), \\\"Account deposited!\\\");\\n        require((msg.value >= depositWei), \\\"Wrong deposit amount!\\\");\\n        bidderToDeposits[msg.sender] += uint128(msg.value);\\n        eventEmitter.emitAuctionDepositPlaced(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            msg.value,\\n            block.timestamp\\n        );\\n    }\\n\\n    function placeBid(uint256 _bidAmount) external notForSeller {\\n        require(inBiddingState(), \\\"Illegal state!\\\");\\n        require(getBidTimeLeft() > 0, \\\"Bid ongoing!\\\");\\n        require(\\n            (bidderToDeposits[msg.sender] >= depositWei),\\n            \\\"Deposit required for bidding!\\\"\\n        );\\n        require(_bidAmount > highestBid, \\\"Bid lower than highest bid!\\\");\\n\\n        highestBid = _bidAmount;\\n        highestBidder = msg.sender;\\n        eventEmitter.emitAuctionBidPlaced(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            _bidAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    function withdrawDeposit() external payable {\\n        require(\\n            ((msg.sender != highestBidder) ||\\n                (msg.sender == highestBidder && winnerPaid == true) ||\\n                (msg.sender == highestBidder && inClosedState())),\\n            \\\"Cannot withdraw!\\\"\\n        );\\n        // requires bidder to settle full payment for withdrawal (full payment only when the seller accepted the result)\\n        // requires bidder to not exceed the expiry date for full payment settlement\\n        // close the auction when the expiry date is reached\\n        uint128 depositBalance = bidderToDeposits[msg.sender];\\n        bidderToDeposits[msg.sender] = 0;\\n        (bool sent, ) = payable(msg.sender).call{value: depositBalance}(\\\"\\\");\\n        require(sent, \\\"ETH withdrawal failed!\\\");\\n        eventEmitter.emitAuctionDepositRetrieved(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            depositBalance,\\n            block.timestamp\\n        );\\n    }\\n\\n    function payFullSettlement() external payable onlyWinnerPayment {\\n        require((inPendingPaymentState()), \\\"Illegal state!\\\");\\n        require(\\n            (getPaymentTimeLeft() > 0),\\n            \\\"Payment window for full settlement closed!\\\"\\n        );\\n        require(\\n            (msg.value == (highestBid + platformCharge)),\\n            \\\"Payment value != (winning bid + platform charge)!\\\"\\n        );\\n        require((!winnerPaid), \\\"You have paid!\\\");\\n        addressToProceeds[seller] = highestBid;\\n        addressToProceeds[platformOwner] = platformCharge;\\n        winnerPaid = true;\\n        auctionManager.removePendingPaymentAuction(address(this));\\n        eventEmitter.emitAuctionFullSettlementPaid(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            seller,\\n            msg.value,\\n            block.timestamp\\n        );\\n        currAuctionState = AuctionState.PENDING_AUDIT;\\n    }\\n\\n    function withdrawSellerEarnings() external onlySeller {\\n        require(\\n            (auctionEndState ==\\n                Constants.AuctionEndState.OWNERSHIP_TRANSFERRED),\\n            \\\"Ownership not transferred!\\\"\\n        );\\n        uint256 proceeds = addressToProceeds[seller];\\n        if (proceeds <= 0) {\\n            revert Auction_NoProceeds();\\n        }\\n        (bool sent, ) = payable(seller).call{value: proceeds}(\\\"\\\");\\n        require(sent, \\\"ETH transfer failed\\\");\\n        addressToProceeds[seller] = 0;\\n        eventEmitter.emitSellerEarningsRetrieved(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            proceeds,\\n            block.timestamp\\n        );\\n    }\\n\\n    function refundFullSettlement() external {\\n        require(\\n            msg.sender == highestBidder,\\n            \\\"Refund can only be made to payer!\\\"\\n        );\\n        require(\\n            auctionEndState == Constants.AuctionEndState.AUDIT_REJECTED,\\n            \\\"Inegligible for refund!\\\"\\n        );\\n        uint256 proceeds = addressToProceeds[seller] +\\n            addressToProceeds[platformOwner];\\n        if (proceeds <= 0) {\\n            revert Auction_NoProceeds();\\n        }\\n        (bool sent, ) = payable(highestBidder).call{value: (proceeds)}(\\\"\\\");\\n        require(sent, \\\"ETH transfer failed\\\");\\n        addressToProceeds[seller] = 0;\\n        addressToProceeds[seller] = 0;\\n        eventEmitter.emitWinnerPaymentRefunded(\\n            address(this),\\n            nftAddress,\\n            tokenId,\\n            msg.sender,\\n            proceeds,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setAuditResult(bool _valid) external onlyNftContract {\\n        require(inPendingAuditState());\\n        if (_valid == true) {\\n            closeAuction(Constants.AuctionEndState.OWNERSHIP_TRANSFERRED);\\n            uint256 proceeds = addressToProceeds[platformOwner];\\n            (bool sent, ) = payable(platformOwner).call{value: proceeds}(\\\"\\\");\\n            require(sent, \\\"ETH transfer failed\\\");\\n            addressToProceeds[platformOwner] = 0;\\n        } else {\\n            closeAuction(Constants.AuctionEndState.AUDIT_REJECTED);\\n        }\\n        eventEmitter.emitAuctionAuditResult(\\n            address(this),\\n            seller,\\n            nftAddress,\\n            tokenId,\\n            highestBidder,\\n            highestBid,\\n            block.timestamp,\\n            _valid\\n        );\\n    }\\n\\n    function getBidTimeLeft() public view returns (uint256) {\\n        if (block.timestamp > bidEndTime) {\\n            return 0;\\n        } else {\\n            return (bidEndTime - block.timestamp);\\n        }\\n    }\\n\\n    function getVerifyTimeLeft() public view returns (uint256) {\\n        if (block.timestamp > verify_expiryTime) {\\n            return 0;\\n        } else {\\n            return (verify_expiryTime - block.timestamp);\\n        }\\n    }\\n\\n    function getPaymentTimeLeft() public view returns (uint256) {\\n        if (block.timestamp > payment_expiryTime) {\\n            return 0;\\n        } else {\\n            return (payment_expiryTime - block.timestamp);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c0e552290fc74c545156a9d298bafae971364c3526e874d014b0c71a32660a2\",\"license\":\"MIT\"},\"libraries/AuctionUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary AuctionUtility {\\n    function getWeiPerUsdRate() internal view returns (uint256) {\\n        // for testnet\\n        /*\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // WeiPerUsd (in 8 decimals)\\n        */\\n        // for local network\\n        int256 price = 132102000000;\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function convertWeiToUsd(uint256 p_weiAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethRate = getWeiPerUsdRate();\\n        uint256 usdEquivalent = (p_weiAmount * ethRate) / (1e18 * 1e18);\\n        return usdEquivalent;\\n    }\\n\\n    function convertUsdToWei(uint256 p_usdAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethRate = getWeiPerUsdRate();\\n        uint256 weiEquivalent = (1e18 * 1e18) / (p_usdAmount * ethRate);\\n        return weiEquivalent;\\n    }\\n\\n    function hourToSec(uint inHours) internal pure returns (uint256 inMinutes) {\\n        return (inHours * 60 * 60);\\n    }\\n\\n    function getContractType(address _contractAddress)\\n        internal\\n        returns (Constants.ContractType)\\n    {\\n        (bool success, bytes memory data) = _contractAddress.call(\\n            abi.encodeWithSignature(\\\"getContractType()\\\")\\n        );\\n        require(success, \\\"Unable to determine the contract type!\\\");\\n        return abi.decode(data, (Constants.ContractType));\\n    }\\n\\n    function getPlatformCharge(uint256 highestBid)\\n        internal\\n        pure\\n        returns (uint256 platformCharge)\\n    {\\n        return (highestBid * Constants.platformChargeRate) / 100;\\n    }\\n}\\n\\nlibrary Constants {\\n    enum ContractType {\\n        AUCTION,\\n        AUCTION_MANAGER,\\n        AUCTION_REGISTRY,\\n        CONTRACT_FACTORY,\\n        AUCTION_KEEPER\\n    }\\n\\n    enum AuctionEndState {\\n        NOT_ENDED,\\n        CANCELED,\\n        NO_BIDDER,\\n        REJECTED_BY_SELLER,\\n        PAYMENT_OVERDUE,\\n        AUDIT_REJECTED,\\n        OWNERSHIP_TRANSFERRED\\n    }\\n\\n    enum PlatformEarnings {\\n        DEPOSIT, // when winner did not pay full settlement\\n        FULL_SETTLEMENT // when auction passed audit\\n    }\\n\\n    uint32 internal constant platformChargeRate = 5; // 5 percent\\n}\\n\",\"keccak256\":\"0x320a6e720a495b8cb774c1aef8d574944e9603cd2c184c0d412ff1c0f238ea8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f7838038062000f788339810160408190526200003491620000c2565b600380546001600160a01b039586166001600160a01b031991821617909155600480549486169482169490941790935560058054928516928416929092179091556006805491909316911617905562000130565b60006001600160a01b0382165b92915050565b620000a68162000088565b8114620000b257600080fd5b50565b805162000095816200009b565b60008060008060808587031215620000dd57620000dd600080fd5b6000620000eb8787620000b5565b9450506020620000fe87828801620000b5565b93505060406200011187828801620000b5565b92505060606200012487828801620000b5565b91505092959194509250565b610e3880620001406000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638ac3f2ba116100a2578063d3f7c1c011610071578063d3f7c1c01461020c578063e0f0f2cf1461021f578063e558019114610227578063f575795c1461023a578063f7e882981461024d57600080fd5b80638ac3f2ba146101c45780639188319c146101d7578063c51a29e0146101ea578063d054059c146101f957600080fd5b80637ca80099116100de5780637ca80099146101765780638214fe331461019657806382b4318c146101a957806387c8b7fb146101bc57600080fd5b80630d800c1a146101105780630e652b48146101395780631d6a99651461014e57806344b8f18914610161575b600080fd5b61012361011e366004610aa8565b610260565b6040516101309190610ae9565b60405180910390f35b61014c610147366004610b0b565b61028a565b005b61014c61015c366004610b0b565b6102ff565b610169610414565b6040516101309190610b89565b610189610184366004610b0b565b610476565b6040516101309190610ba7565b6101896101a4366004610b0b565b6104de565b61014c6101b7366004610b0b565b61053c565b6101696105b3565b6101236101d2366004610aa8565b610613565b61014c6101e5366004610b0b565b610623565b60016040516101309190610bfe565b610123610207366004610aa8565b61069b565b61014c61021a366004610b0b565b6106ab565b610169610796565b610189610235366004610b0b565b6107f6565b61014c610248366004610b0b565b610854565b61014c61025b366004610c0c565b61093f565b6000818154811061027057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610295336109b8565b60048111156102a6576102a6610bb5565b146102b057600080fd5b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b600061030a336109b8565b600481111561031b5761031b610bb5565b1461032557600080fd5b60008061033183610476565b90506000811261040f57905080805b60025461034f90600190610c5f565b8110156103da576002610363826001610c76565b8154811061037357610373610c8e565b600091825260209091200154600280546001600160a01b03909216918390811061039f5761039f610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806103d281610ca4565b915050610340565b5060028054806103ec576103ec610cbf565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561046c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161044e575b5050505050905090565b6000805b6002548110156104d457826001600160a01b0316600282815481106104a1576104a1610c8e565b6000918252602090912001546001600160a01b031614156104c25792915050565b806104cc81610ca4565b91505061047a565b5060001992915050565b6000805b6001548110156104d457826001600160a01b03166001828154811061050957610509610c8e565b6000918252602090912001546001600160a01b0316141561052a5792915050565b8061053481610ca4565b9150506104e2565b6000610547336109b8565b600481111561055857610558610bb5565b1461056257600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600180548060200260200160405190810160405280929190818152602001828054801561046c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161044e575050505050905090565b6001818154811061027057600080fd5b600061062e336109b8565b600481111561063f5761063f610bb5565b1461064957600080fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b6002818154811061027057600080fd5b60006106b6336109b8565b60048111156106c7576106c7610bb5565b146106d157600080fd5b6000806106dd836104de565b90506000811261040f57905080805b600180546106fa9190610c5f565b81101561078457600161070d8282610c76565b8154811061071d5761071d610c8e565b600091825260209091200154600180546001600160a01b03909216918390811061074957610749610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061077c81610ca4565b9150506106ec565b5060018054806103ec576103ec610cbf565b6060600080548060200260200160405190810160405280929190818152602001828054801561046c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161044e575050505050905090565b6000805b6000548110156104d457826001600160a01b03166000828154811061082157610821610c8e565b6000918252602090912001546001600160a01b031614156108425792915050565b8061084c81610ca4565b9150506107fa565b600061085f336109b8565b600481111561087057610870610bb5565b1461087a57600080fd5b600080610886836107f6565b90506000811261040f57905080805b6000546108a490600190610c5f565b81101561092d5760006108b8826001610c76565b815481106108c8576108c8610c8e565b600091825260208220015481546001600160a01b039091169190839081106108f2576108f2610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061092581610ca4565b915050610895565b5060008054806103ec576103ec610cbf565b60065460048054600554604051633d85f50560e21b81526001600160a01b0394851694859463f617d414946109819433948b948b949381169392169101610cd5565b600060405180830381600087803b15801561099b57600080fd5b505af11580156109af573d6000803e3d6000fd5b50505050505050565b60408051600481526024810182526020810180516001600160e01b0316630628d14f60e51b1790529051600091829182916001600160a01b038616916109fe9190610d73565b6000604051808303816000865af19150503d8060008114610a3b576040519150601f19603f3d011682016040523d82523d6000602084013e610a40565b606091505b509150915081610a6b5760405162461bcd60e51b8152600401610a6290610d7f565b60405180910390fd5b80806020019051810190610a7f9190610de1565b949350505050565b805b8114610a9457600080fd5b50565b8035610aa281610a87565b92915050565b600060208284031215610abd57610abd600080fd5b6000610a7f8484610a97565b60006001600160a01b038216610aa2565b610ae381610ac9565b82525050565b60208101610aa28284610ada565b610a8981610ac9565b8035610aa281610af7565b600060208284031215610b2057610b20600080fd5b6000610a7f8484610b00565b6000610b388383610ada565b505060200190565b6000610b4a825190565b80845260209384019383018060005b83811015610b7e578151610b6d8882610b2c565b975060208301925050600101610b59565b509495945050505050565b60208082528101610b9a8184610b40565b9392505050565b80610ae3565b60208101610aa28284610ba1565b634e487b7160e01b600052602160045260246000fd5b60058110610a9457610a94610bb5565b80610be581610bcb565b919050565b6000610aa282610bdb565b610ae381610bea565b60208101610aa28284610bf5565b60008060408385031215610c2257610c22600080fd5b6000610c2e8585610b00565b9250506020610c3f85828601610a97565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015610c7157610c71610c49565b500390565b60008219821115610c8957610c89610c49565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610cb857610cb8610c49565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60a08101610ce38288610ada565b610cf06020830187610ada565b610cfd6040830186610ba1565b610d0a6060830185610ada565b610d176080830184610ada565b9695505050505050565b60005b83811015610d3c578181015183820152602001610d24565b83811115610d4b576000848401525b50505050565b6000610d5b825190565b610d69818560208601610d21565b9290920192915050565b6000610b9a8284610d51565b60208082528101610aa281602681527f556e61626c6520746f2064657465726d696e652074686520636f6e747261637460208201526520747970652160d01b604082015260600190565b60058110610a9457600080fd5b8051610aa281610dc9565b600060208284031215610df657610df6600080fd5b6000610a7f8484610dd656fea2646970667358221220902264c61d7ea6f254dd0b8b0f0cf2d576f178ebffa4ba373d1a543680794f9364736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638ac3f2ba116100a2578063d3f7c1c011610071578063d3f7c1c01461020c578063e0f0f2cf1461021f578063e558019114610227578063f575795c1461023a578063f7e882981461024d57600080fd5b80638ac3f2ba146101c45780639188319c146101d7578063c51a29e0146101ea578063d054059c146101f957600080fd5b80637ca80099116100de5780637ca80099146101765780638214fe331461019657806382b4318c146101a957806387c8b7fb146101bc57600080fd5b80630d800c1a146101105780630e652b48146101395780631d6a99651461014e57806344b8f18914610161575b600080fd5b61012361011e366004610aa8565b610260565b6040516101309190610ae9565b60405180910390f35b61014c610147366004610b0b565b61028a565b005b61014c61015c366004610b0b565b6102ff565b610169610414565b6040516101309190610b89565b610189610184366004610b0b565b610476565b6040516101309190610ba7565b6101896101a4366004610b0b565b6104de565b61014c6101b7366004610b0b565b61053c565b6101696105b3565b6101236101d2366004610aa8565b610613565b61014c6101e5366004610b0b565b610623565b60016040516101309190610bfe565b610123610207366004610aa8565b61069b565b61014c61021a366004610b0b565b6106ab565b610169610796565b610189610235366004610b0b565b6107f6565b61014c610248366004610b0b565b610854565b61014c61025b366004610c0c565b61093f565b6000818154811061027057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610295336109b8565b60048111156102a6576102a6610bb5565b146102b057600080fd5b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b600061030a336109b8565b600481111561031b5761031b610bb5565b1461032557600080fd5b60008061033183610476565b90506000811261040f57905080805b60025461034f90600190610c5f565b8110156103da576002610363826001610c76565b8154811061037357610373610c8e565b600091825260209091200154600280546001600160a01b03909216918390811061039f5761039f610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806103d281610ca4565b915050610340565b5060028054806103ec576103ec610cbf565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561046c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161044e575b5050505050905090565b6000805b6002548110156104d457826001600160a01b0316600282815481106104a1576104a1610c8e565b6000918252602090912001546001600160a01b031614156104c25792915050565b806104cc81610ca4565b91505061047a565b5060001992915050565b6000805b6001548110156104d457826001600160a01b03166001828154811061050957610509610c8e565b6000918252602090912001546001600160a01b0316141561052a5792915050565b8061053481610ca4565b9150506104e2565b6000610547336109b8565b600481111561055857610558610bb5565b1461056257600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600180548060200260200160405190810160405280929190818152602001828054801561046c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161044e575050505050905090565b6001818154811061027057600080fd5b600061062e336109b8565b600481111561063f5761063f610bb5565b1461064957600080fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b6002818154811061027057600080fd5b60006106b6336109b8565b60048111156106c7576106c7610bb5565b146106d157600080fd5b6000806106dd836104de565b90506000811261040f57905080805b600180546106fa9190610c5f565b81101561078457600161070d8282610c76565b8154811061071d5761071d610c8e565b600091825260209091200154600180546001600160a01b03909216918390811061074957610749610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061077c81610ca4565b9150506106ec565b5060018054806103ec576103ec610cbf565b6060600080548060200260200160405190810160405280929190818152602001828054801561046c576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161044e575050505050905090565b6000805b6000548110156104d457826001600160a01b03166000828154811061082157610821610c8e565b6000918252602090912001546001600160a01b031614156108425792915050565b8061084c81610ca4565b9150506107fa565b600061085f336109b8565b600481111561087057610870610bb5565b1461087a57600080fd5b600080610886836107f6565b90506000811261040f57905080805b6000546108a490600190610c5f565b81101561092d5760006108b8826001610c76565b815481106108c8576108c8610c8e565b600091825260208220015481546001600160a01b039091169190839081106108f2576108f2610c8e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061092581610ca4565b915050610895565b5060008054806103ec576103ec610cbf565b60065460048054600554604051633d85f50560e21b81526001600160a01b0394851694859463f617d414946109819433948b948b949381169392169101610cd5565b600060405180830381600087803b15801561099b57600080fd5b505af11580156109af573d6000803e3d6000fd5b50505050505050565b60408051600481526024810182526020810180516001600160e01b0316630628d14f60e51b1790529051600091829182916001600160a01b038616916109fe9190610d73565b6000604051808303816000865af19150503d8060008114610a3b576040519150601f19603f3d011682016040523d82523d6000602084013e610a40565b606091505b509150915081610a6b5760405162461bcd60e51b8152600401610a6290610d7f565b60405180910390fd5b80806020019051810190610a7f9190610de1565b949350505050565b805b8114610a9457600080fd5b50565b8035610aa281610a87565b92915050565b600060208284031215610abd57610abd600080fd5b6000610a7f8484610a97565b60006001600160a01b038216610aa2565b610ae381610ac9565b82525050565b60208101610aa28284610ada565b610a8981610ac9565b8035610aa281610af7565b600060208284031215610b2057610b20600080fd5b6000610a7f8484610b00565b6000610b388383610ada565b505060200190565b6000610b4a825190565b80845260209384019383018060005b83811015610b7e578151610b6d8882610b2c565b975060208301925050600101610b59565b509495945050505050565b60208082528101610b9a8184610b40565b9392505050565b80610ae3565b60208101610aa28284610ba1565b634e487b7160e01b600052602160045260246000fd5b60058110610a9457610a94610bb5565b80610be581610bcb565b919050565b6000610aa282610bdb565b610ae381610bea565b60208101610aa28284610bf5565b60008060408385031215610c2257610c22600080fd5b6000610c2e8585610b00565b9250506020610c3f85828601610a97565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015610c7157610c71610c49565b500390565b60008219821115610c8957610c89610c49565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610cb857610cb8610c49565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60a08101610ce38288610ada565b610cf06020830187610ada565b610cfd6040830186610ba1565b610d0a6060830185610ada565b610d176080830184610ada565b9695505050505050565b60005b83811015610d3c578181015183820152602001610d24565b83811115610d4b576000848401525b50505050565b6000610d5b825190565b610d69818560208601610d21565b9290920192915050565b6000610b9a8284610d51565b60208082528101610aa281602681527f556e61626c6520746f2064657465726d696e652074686520636f6e747261637460208201526520747970652160d01b604082015260600190565b60058110610a9457600080fd5b8051610aa281610dc9565b600060208284031215610df657610df6600080fd5b6000610a7f8484610dd656fea2646970667358221220902264c61d7ea6f254dd0b8b0f0cf2d576f178ebffa4ba373d1a543680794f9364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1465,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "biddingAuctions",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1468,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "verifyWinnerAuctions",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1471,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "pendingPaymentAuctions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1473,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "auctionRegistryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1475,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "eventEmitterAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1477,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "auctionKeeperAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1479,
        "contract": "contracts/AuctionContracts.sol:AuctionManager",
        "label": "contractFactoryAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}