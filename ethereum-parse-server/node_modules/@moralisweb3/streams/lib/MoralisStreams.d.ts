import { Endpoints } from '@moralisweb3/api-utils';
import { ApiModule, MoralisCore } from '@moralisweb3/core';
import { VerifySignatureOptions } from './methods/verifySignature';
import { ParseLogOptions } from './methods/logParser';
export declare const BASE_URL = "https://api.moralis-streams.com";
export declare class MoralisStreams extends ApiModule {
    static readonly moduleName = "streams";
    static create(core?: MoralisCore): MoralisStreams;
    private constructor();
    setup(): void;
    start(): void;
    readonly endpoints: Endpoints;
    readonly add: ({ network, ...options }: import("./methods/create").CreateStreamEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, import("./resolvers/evmStreams/createStreamEvm").Params>>;
    readonly update: ({ network, ...options }: import("./methods/update").UpdateStreamEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, import("./resolvers/evmStreams/updateStreamEvm").Params>>;
    readonly delete: ({ network, ...options }: import("./methods/delete").DeleteStreamEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: import("@moralisweb3/core").Camelize<"wallet" | "contract">;
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        id: string;
    }>>;
    readonly getAll: ({ network, ...options }: import("./methods/getAll").GetStreamsEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }[]>, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        tokenAddress: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }[], {
        address: string | undefined;
        tokenAddress: string | undefined;
        chainIds: (string | number)[];
        chains: import("@moralisweb3/evm-utils").EvmChain[];
        webhookUrl: string;
        description: string;
        tag: string;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }[], {
        limit: number;
        cursor?: string | undefined;
    }>>;
    readonly updateStatus: ({ network, ...options }: import("./methods/updateStatus").UpdateStreamEvmStatusOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        webhookUrl: string;
        description: string;
        tag: string;
        tokenAddress?: string | null | undefined;
        topic0?: string | null | undefined;
        includeNativeTxs?: boolean | undefined;
        abi?: {
            [key: string]: unknown;
        } | null | undefined;
        filter?: {
            [key: string]: unknown;
        } | null | undefined;
        address?: string | null | undefined;
        chainIds: string[];
        type: "wallet" | "contract";
        id?: string | undefined;
        status?: "active" | "paused" | "error" | undefined;
        statusMessage?: string | undefined;
    }, {
        id: string;
    } & {
        status: "active" | "paused" | "error";
    }>>;
    readonly addAddress: ({ network, ...options }: import("./methods/addAddress").AddAddressEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        streamId: string;
        address: string;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        streamId: string;
    }, {
        address: string | undefined;
        streamId: string;
    }, {
        id: string;
    } & {
        address: string;
    }>>;
    readonly getAddresses: ({ network, ...options }: import("./methods/getAddresses").GetAddressesEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiPaginatedResultAdapter<import("@moralisweb3/api-utils").PaginatedResult<{
        address: string;
        id: string;
    }[]>, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        id: string;
    }[], {
        address: string | undefined;
        id: string;
    }[], {
        id: string;
    }>>;
    readonly deleteAddress: ({ network, ...options }: import("./methods/deleteAddress").DeleteAddressEvmOptions) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        streamId: string;
        address: string;
    }, {
        address: import("@moralisweb3/evm-utils").EvmAddress | undefined;
        streamId: string;
    }, {
        address: string | undefined;
        streamId: string;
    }, {
        id: string;
    } & {
        address: string;
    }>>;
    readonly getHistory: (params: {
        limit: number;
        cursor?: string | undefined;
    }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        result: {
            id: string;
            date: string;
            payload: {
                erc20Transfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    from: string;
                    to: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                erc20Approvals: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    spender: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                nftTransfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                    operator: string | null;
                    from: string;
                    to: string;
                    tokenId: string;
                    amount: string;
                }[];
                nftApprovals: {
                    ERC721: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        owner: string;
                        approved: string;
                        tokenId: string;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                    ERC1155: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        account: string;
                        operator: string;
                        approved: boolean;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                };
                block: {
                    number: string;
                    hash: string;
                    timestamp: string;
                };
                chainId: string;
                logs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    logIndex: string;
                    transactionHash: string;
                    address: string;
                    data: string;
                    topic0: string | null;
                    topic1: string | null;
                    topic2: string | null;
                    topic3: string | null;
                }[];
                txs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    hash: string;
                    gas: string | null;
                    gasPrice: string | null;
                    nonce: string | null;
                    input: string | null;
                    transactionIndex: string;
                    fromAddress: string;
                    toAddress: string | null;
                    value: string | null;
                    type: string | null;
                    v: string | null;
                    r: string | null;
                    s: string | null;
                    receiptCumulativeGasUsed: string | null;
                    receiptGasUsed: string | null;
                    receiptContractAddress: string | null;
                    receiptRoot: string | null;
                    receiptStatus: string | null;
                }[];
                txsInternal: {
                    from: string | null;
                    to: string | null;
                    value: string | null;
                    transactionHash: string;
                    gas: string | null;
                    streamId: string;
                    tag: string;
                    streamType: string;
                }[];
                abis: {
                    [key: string]: {
                        anonymous?: boolean | undefined;
                        constant?: boolean | undefined;
                        inputs?: {
                            name: string;
                            type: string;
                            indexed?: boolean | undefined;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        name?: string | undefined;
                        outputs?: {
                            name: string;
                            type: string;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        payable?: boolean | undefined;
                        stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                        type: "function" | "constructor" | "event" | "fallback";
                        gas?: number | undefined;
                    };
                };
                retries: number;
                confirmed: boolean;
            };
            errorMessage: string;
            webhookUrl: string;
        }[];
        cursor?: string | undefined;
    }, {
        result: {
            id: string;
            date: string;
            payload: {
                erc20Transfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    from: string;
                    to: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                erc20Approvals: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    spender: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                nftTransfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                    operator: string | null;
                    from: string;
                    to: string;
                    tokenId: string;
                    amount: string;
                }[];
                nftApprovals: {
                    ERC721: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        owner: string;
                        approved: string;
                        tokenId: string;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                    ERC1155: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        account: string;
                        operator: string;
                        approved: boolean;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                };
                block: {
                    number: string;
                    hash: string;
                    timestamp: string;
                };
                chainId: string;
                logs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    logIndex: string;
                    transactionHash: string;
                    address: string;
                    data: string;
                    topic0: string | null;
                    topic1: string | null;
                    topic2: string | null;
                    topic3: string | null;
                }[];
                txs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    hash: string;
                    gas: string | null;
                    gasPrice: string | null;
                    nonce: string | null;
                    input: string | null;
                    transactionIndex: string;
                    fromAddress: string;
                    toAddress: string | null;
                    value: string | null;
                    type: string | null;
                    v: string | null;
                    r: string | null;
                    s: string | null;
                    receiptCumulativeGasUsed: string | null;
                    receiptGasUsed: string | null;
                    receiptContractAddress: string | null;
                    receiptRoot: string | null;
                    receiptStatus: string | null;
                }[];
                txsInternal: {
                    from: string | null;
                    to: string | null;
                    value: string | null;
                    transactionHash: string;
                    gas: string | null;
                    streamId: string;
                    tag: string;
                    streamType: string;
                }[];
                abis: {
                    [key: string]: {
                        anonymous?: boolean | undefined;
                        constant?: boolean | undefined;
                        inputs?: {
                            name: string;
                            type: string;
                            indexed?: boolean | undefined;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        name?: string | undefined;
                        outputs?: {
                            name: string;
                            type: string;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        payable?: boolean | undefined;
                        stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                        type: "function" | "constructor" | "event" | "fallback";
                        gas?: number | undefined;
                    };
                };
                retries: number;
                confirmed: boolean;
            };
            errorMessage: string;
            webhookUrl: string;
        }[];
        cursor?: string | undefined;
    }, {
        result: {
            id: string;
            date: string;
            payload: {
                erc20Transfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    from: string;
                    to: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                erc20Approvals: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    spender: string;
                    value: string;
                    tokenDecimals: string;
                    tokenName: string;
                    tokenSymbol: string;
                    valueWithDecimals?: string | undefined;
                }[];
                nftTransfers: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                    operator: string | null;
                    from: string;
                    to: string;
                    tokenId: string;
                    amount: string;
                }[];
                nftApprovals: {
                    ERC721: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        owner: string;
                        approved: string;
                        tokenId: string;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                    ERC1155: {
                        transactionHash: string;
                        tokenAddress: string;
                        logIndex: string;
                        tag: string;
                        account: string;
                        operator: string;
                        approved: boolean;
                        tokenContractType: string;
                        tokenName: string;
                        tokenSymbol: string;
                    }[];
                };
                block: {
                    number: string;
                    hash: string;
                    timestamp: string;
                };
                chainId: string;
                logs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    logIndex: string;
                    transactionHash: string;
                    address: string;
                    data: string;
                    topic0: string | null;
                    topic1: string | null;
                    topic2: string | null;
                    topic3: string | null;
                }[];
                txs: {
                    tag: string;
                    streamId: string;
                    streamType: string;
                    hash: string;
                    gas: string | null;
                    gasPrice: string | null;
                    nonce: string | null;
                    input: string | null;
                    transactionIndex: string;
                    fromAddress: string;
                    toAddress: string | null;
                    value: string | null;
                    type: string | null;
                    v: string | null;
                    r: string | null;
                    s: string | null;
                    receiptCumulativeGasUsed: string | null;
                    receiptGasUsed: string | null;
                    receiptContractAddress: string | null;
                    receiptRoot: string | null;
                    receiptStatus: string | null;
                }[];
                txsInternal: {
                    from: string | null;
                    to: string | null;
                    value: string | null;
                    transactionHash: string;
                    gas: string | null;
                    streamId: string;
                    tag: string;
                    streamType: string;
                }[];
                abis: {
                    [key: string]: {
                        anonymous?: boolean | undefined;
                        constant?: boolean | undefined;
                        inputs?: {
                            name: string;
                            type: string;
                            indexed?: boolean | undefined;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        name?: string | undefined;
                        outputs?: {
                            name: string;
                            type: string;
                            components?: any[] | undefined;
                            internalType?: string | undefined;
                        }[] | undefined;
                        payable?: boolean | undefined;
                        stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                        type: "function" | "constructor" | "event" | "fallback";
                        gas?: number | undefined;
                    };
                };
                retries: number;
                confirmed: boolean;
            };
            errorMessage: string;
            webhookUrl: string;
        }[];
        cursor?: string | undefined;
    }, {
        limit: number;
        cursor?: string | undefined;
    }>>;
    readonly retry: (params: {
        id: string;
    }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                from: string;
                to: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
                operator: string | null;
                from: string;
                to: string;
                tokenId: string;
                amount: string;
            }[];
            nftApprovals: {
                ERC721: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    approved: string;
                    tokenId: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
                ERC1155: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    account: string;
                    operator: string;
                    approved: boolean;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
            };
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                tag: string;
                streamId: string;
                streamType: string;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                tag: string;
                streamId: string;
                streamType: string;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
                streamId: string;
                tag: string;
                streamType: string;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }, {
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                from: string;
                to: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
                operator: string | null;
                from: string;
                to: string;
                tokenId: string;
                amount: string;
            }[];
            nftApprovals: {
                ERC721: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    approved: string;
                    tokenId: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
                ERC1155: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    account: string;
                    operator: string;
                    approved: boolean;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
            };
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                tag: string;
                streamId: string;
                streamType: string;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                tag: string;
                streamId: string;
                streamType: string;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
                streamId: string;
                tag: string;
                streamType: string;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }, {
        id: string;
        date: string;
        payload: {
            erc20Transfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                from: string;
                to: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            erc20Approvals: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                owner: string;
                spender: string;
                value: string;
                tokenDecimals: string;
                tokenName: string;
                tokenSymbol: string;
                valueWithDecimals?: string | undefined;
            }[];
            nftTransfers: {
                transactionHash: string;
                tokenAddress: string;
                logIndex: string;
                tag: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
                operator: string | null;
                from: string;
                to: string;
                tokenId: string;
                amount: string;
            }[];
            nftApprovals: {
                ERC721: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    owner: string;
                    approved: string;
                    tokenId: string;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
                ERC1155: {
                    transactionHash: string;
                    tokenAddress: string;
                    logIndex: string;
                    tag: string;
                    account: string;
                    operator: string;
                    approved: boolean;
                    tokenContractType: string;
                    tokenName: string;
                    tokenSymbol: string;
                }[];
            };
            block: {
                number: string;
                hash: string;
                timestamp: string;
            };
            chainId: string;
            logs: {
                tag: string;
                streamId: string;
                streamType: string;
                logIndex: string;
                transactionHash: string;
                address: string;
                data: string;
                topic0: string | null;
                topic1: string | null;
                topic2: string | null;
                topic3: string | null;
            }[];
            txs: {
                tag: string;
                streamId: string;
                streamType: string;
                hash: string;
                gas: string | null;
                gasPrice: string | null;
                nonce: string | null;
                input: string | null;
                transactionIndex: string;
                fromAddress: string;
                toAddress: string | null;
                value: string | null;
                type: string | null;
                v: string | null;
                r: string | null;
                s: string | null;
                receiptCumulativeGasUsed: string | null;
                receiptGasUsed: string | null;
                receiptContractAddress: string | null;
                receiptRoot: string | null;
                receiptStatus: string | null;
            }[];
            txsInternal: {
                from: string | null;
                to: string | null;
                value: string | null;
                transactionHash: string;
                gas: string | null;
                streamId: string;
                tag: string;
                streamType: string;
            }[];
            abis: {
                [key: string]: {
                    anonymous?: boolean | undefined;
                    constant?: boolean | undefined;
                    inputs?: {
                        name: string;
                        type: string;
                        indexed?: boolean | undefined;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    name?: string | undefined;
                    outputs?: {
                        name: string;
                        type: string;
                        components?: any[] | undefined;
                        internalType?: string | undefined;
                    }[] | undefined;
                    payable?: boolean | undefined;
                    stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                    type: "function" | "constructor" | "event" | "fallback";
                    gas?: number | undefined;
                };
            };
            retries: number;
            confirmed: boolean;
        };
        errorMessage: string;
        webhookUrl: string;
    }, {
        id: string;
    }>>;
    readonly setSettings: (params: {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }) => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<unknown, {
        success: boolean;
    }, {
        success: boolean;
    }, {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }>>;
    private readonly _readSettings;
    readonly readSettings: () => Promise<import("@moralisweb3/api-utils").ApiResultAdapter<{
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }, {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }, {
        region?: "us-east-1" | "us-west-2" | "eu-central-1" | "ap-southeast-1" | undefined;
    }, unknown>>;
    readonly verifySignature: (options: VerifySignatureOptions) => boolean;
    readonly parsedLogs: <Event_1>(options: ParseLogOptions) => Event_1[];
}
//# sourceMappingURL=MoralisStreams.d.ts.map